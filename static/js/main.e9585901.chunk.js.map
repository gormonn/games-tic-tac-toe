{"version":3,"sources":["game/utils.js","logo.svg","game/gui.js","game/GameOver.js","game/TicTacToe.js","App.js","reportWebVitals.js","index.js"],"names":["i","battleFieldRaw","size","Array","fill","iSymbols","map","_","toString","join","nameStringify","iHor","iVert","Overlay","styled","div","p","$winner","Rows","Box","Column","animated","$touched","$isWinLine","ColumnName","span","GameOver","winner","reset","onClick","TicTacToe","useState","Date","getMilliseconds","gameId","setGameId","setSize","setPlayer","playerTurn","setPlayerTurn","setWinner","winLine","setWinLine","battleField","setBattleField","useMemo","allCells","Set","winSchemas","lineDiag2","x","lineVert","lineHori","lineDiag1","push","y","add","arr","obj","forEach","key","createWinCounter","winSchemasRaw","winSchemasList","setWinSchemas","touchedCells","setTouchedCells","unTouchedCells","setUnTouchedCells","hardMode","setHardMode","withBot","setWithBot","X_MAX","O_VAL","O_MAX","sizes","from","length","useEffect","clickHandler","useCallback","name","otherPlayer","e","newBattleField","Object","assign","touchedSet","unTouchedSet","delete","turn","newWinSchemas","includes","checkWinner","player","randomCell","Math","floor","random","split","yStr","indexOf","Number","nameParse","preSet","cb","target","window","confirm","value","onChange","type","mode","disabled","rows","cell","Col","touched","isWinLine","isWinnerCell","useSpring","scale","zoom","config","mass","tension","friction","style","to","s","z","$isWinnerCell","onContextMenu","preventDefault","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9585901.chunk.js","sourcesContent":["export const battleFieldRaw = (size) =>\r\n  new Array(size).fill(new Array(size).fill(0));\r\n\r\nexport const iSymbols = ((i) => {\r\n  return [...Array(26)].map((_) => (++i).toString(36), (i = 9)).join``;\r\n})(0);\r\n\r\nexport const nameSeparator = \":\";\r\nexport const nameStringify = (iHor, iVert) =>\r\n  `${iHor}${nameSeparator}${iSymbols[iVert]}`;\r\n\r\nexport const nameParse = (name) => {\r\n  const [x, yStr] = name.split(nameSeparator);\r\n  const y = iSymbols.indexOf(yStr);\r\n  return [Number(x), Number(y)];\r\n};\r\n\r\nexport const winSchemasRaw = (size) => {\r\n  const allCells = new Set();\r\n  const winSchemas = new Set();\r\n  const lineDiag2 = [];\r\n  for (let x = 0; x < size; x++) {\r\n    const lineVert = [];\r\n    const lineHori = [];\r\n    const lineDiag1 = [];\r\n\r\n    // lineDiag2.push(`${x}${nameSeparator}${iSymbols[x]}`);\r\n    lineDiag2.push(nameStringify(x, x));\r\n    for (let y = 0; y < size; y++) {\r\n      // lineVert.push(`${x}${nameSeparator}${iSymbols[y]}`);\r\n      // lineHori.push(`${y}${nameSeparator}${iSymbols[x]}`);\r\n      // lineDiag1.push(`${y}${nameSeparator}${iSymbols[size - 1 - y]}`);\r\n      // allCells.add(`${x}${nameSeparator}${iSymbols[y]}`);\r\n      lineVert.push(nameStringify(x, y));\r\n      lineHori.push(nameStringify(y, x));\r\n      lineDiag1.push(nameStringify(y, size - 1 - y));\r\n      allCells.add(nameStringify(x, y));\r\n    }\r\n    winSchemas.add(lineVert.join(\".\"));\r\n    winSchemas.add(lineHori.join(\".\"));\r\n    winSchemas.add(lineDiag1.join(\".\"));\r\n  }\r\n\r\n  winSchemas.add(lineDiag2.join(\".\"));\r\n\r\n  return [createWinCounter([...winSchemas]), [...allCells]];\r\n\r\n  function createWinCounter(arr) {\r\n    const obj = {};\r\n    arr.forEach((key) => {\r\n      obj[key] = 0;\r\n    });\r\n    return obj;\r\n  }\r\n};\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import styled from \"styled-components\";\r\nimport { animated } from \"@react-spring/web\";\r\n\r\nexport const Overlay = styled.div`\r\n  background: ${(p) => (p.$winner ? \"rgba(30, 30, 30, 0.5)\" : \"none\")};\r\n  z-index: ${(p) => (p.$winner ? \"1\" : \"0\")};\r\n  transition: 200ms;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nexport const Rows = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\nexport const Box = styled.div`\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n  min-width: 100%;\r\n  min-height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n`;\r\nexport const Column = styled(animated.div)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  transition: 500ms;\r\n  background: ${(p) => (p.$touched ? \"darkgray\" : \"gray\")};\r\n  width: 100px;\r\n  height: 100px;\r\n  position: relative;\r\n  pointer-events: ${(p) => (p.$touched ? \"none\" : \"auto\")};\r\n  cursor: ${(p) => (p.$touched ? \"none\" : \"pointer\")};\r\n  &:hover {\r\n    background: ${(p) => (p.$touched ? \"none\" : \"rgba(255,255,255,.5)\")};\r\n  }\r\n  border: ${(p) => (p.$isWinLine ? \"4px solid black \" : \"none \")};\r\n  box-sizing: border-box;\r\n  zoom: ${(p) => (p.$winner ? \"1!important;\" : \"\")};\r\n`;\r\nexport const ColumnName = styled.span`\r\n  color: gray;\r\n  position: absolute;\r\n  bottom: 14px;\r\n  right: 14px;\r\n  font-size: 14px;\r\n`;\r\n","import React from \"react\";\r\nimport { Overlay } from \"./gui\";\r\n\r\nexport const GameOver = ({ winner, reset }) => {\r\n  return (\r\n    <Overlay $winner={winner}>\r\n      {winner ? (\r\n        <div>\r\n          <p>GAME OVER</p>\r\n          <p>{winner == 2 ? \"X win!\" : winner == -1 ? \"Tie\" : \"O win!\"}</p>\r\n          <button onClick={reset}>Retry</button>\r\n        </div>\r\n      ) : null}\r\n    </Overlay>\r\n  );\r\n};\r\n","import React, {\r\n  useMemo,\r\n  useRef,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport {\r\n  battleFieldRaw,\r\n  nameParse,\r\n  iSymbols,\r\n  nameSeparator,\r\n  winSchemasRaw,\r\n} from \"./utils\";\r\nimport { Box, Column, ColumnName, Rows } from \"./gui\";\r\nimport { useSpring, to } from \"@react-spring/web\";\r\nimport { GameOver } from \"./GameOver\";\r\n\r\nconst initialSize = 3;\r\nexport default function TicTacToe() {\r\n  const [gameId, setGameId] = useState(new Date().getMilliseconds());\r\n  const [size, setSize] = useState(initialSize);\r\n  const [player, setPlayer] = useState(1); //2 - x, 7 - o\r\n  const [playerTurn, setPlayerTurn] = useState(true);\r\n  const [winner, setWinner] = useState(false);\r\n  const [winLine, setWinLine] = useState(\"\");\r\n  const [battleField, setBattleField] = useState(() => battleFieldRaw(size));\r\n  // спорный момент.как это будет работать при reset.... поэтому добавил useEffect[winSchemasList]\r\n  const [winSchemasList, allCells] = useMemo(\r\n    () => winSchemasRaw(size),\r\n    [gameId]\r\n  );\r\n  const [winSchemas, setWinSchemas] = useState(winSchemasList);\r\n  const [touchedCells, setTouchedCells] = useState([]);\r\n  const [unTouchedCells, setUnTouchedCells] = useState(allCells);\r\n  const [hardMode, setHardMode] = useState(false);\r\n  const [withBot, setWithBot] = useState(1);\r\n  const X_VAL = 2;\r\n  const X_MAX = size * X_VAL;\r\n  const O_VAL = X_MAX + 1;\r\n  const O_MAX = size * O_VAL;\r\n\r\n  const sizes = useMemo(() => {\r\n    return Array.from({ length: 10 }, (_, i) => i + 2);\r\n  }, []);\r\n\r\n  const reset = () => {\r\n    setPlayer(1);\r\n    setWinner(false);\r\n    setWinLine(\"\");\r\n    setBattleField(battleFieldRaw(size));\r\n    setTouchedCells([]);\r\n    setPlayerTurn(true);\r\n    setGameId(new Date().getMilliseconds());\r\n  };\r\n\r\n  useEffect(() => {\r\n    setWinSchemas(winSchemasList);\r\n    setUnTouchedCells(allCells);\r\n  }, [winSchemasList, allCells]);\r\n\r\n  useEffect(() => reset(), [size]);\r\n\r\n  const clickHandler = useCallback(\r\n    (iHor, iVert, name, otherPlayer = false) =>\r\n      (e) => {\r\n        // if (otherPlayer) console.log({ iHor, iVert, name, otherPlayer });\r\n        const newBattleField = Object.assign([], battleField, {\r\n          [iHor]: Object.assign([], battleField[iHor], {\r\n            [iVert]: otherPlayer ? \"o\" : \"x\",\r\n          }),\r\n        });\r\n        setBattleField(newBattleField);\r\n\r\n        const touchedSet = new Set([...touchedCells, name]);\r\n        setTouchedCells([...touchedSet]);\r\n\r\n        const unTouchedSet = new Set([...unTouchedCells]);\r\n        unTouchedSet.delete(name);\r\n        setUnTouchedCells([...unTouchedSet]);\r\n\r\n        setPlayerTurn((turn) => !turn);\r\n\r\n        const newWinSchemas = { ...winSchemas };\r\n        for (let key in winSchemas) {\r\n          if (key.includes(name))\r\n            newWinSchemas[key] += otherPlayer ? O_VAL : X_VAL;\r\n        }\r\n        setWinSchemas(newWinSchemas);\r\n      },\r\n    [battleField, touchedCells, unTouchedCells, winSchemas]\r\n  );\r\n\r\n  useEffect(() => {\r\n    function checkWinner() {\r\n      for (let key in winSchemas) {\r\n        if (winSchemas[key] === X_MAX) return [X_VAL, key];\r\n        if (winSchemas[key] === O_MAX) return [O_VAL, key];\r\n      }\r\n    }\r\n    const winner = checkWinner();\r\n    if (winner) {\r\n      const [player, winLine] = winner;\r\n      setWinner(player);\r\n      setWinLine(winLine);\r\n    } else if (touchedCells.length === size ** 2) {\r\n      setWinner(-1);\r\n    }\r\n  }, [winSchemas, size]);\r\n\r\n  useEffect(() => {\r\n    if (unTouchedCells.length && withBot && !playerTurn) {\r\n      const randomCell =\r\n        unTouchedCells[Math.floor(Math.random() * unTouchedCells.length)];\r\n      const otherPlayer = true;\r\n      const [iHor, iVert] = nameParse(randomCell);\r\n      clickHandler(iHor, iVert, randomCell, otherPlayer)();\r\n    }\r\n  }, [unTouchedCells]);\r\n\r\n  const preSet =\r\n    (cb) =>\r\n    ({ target }) => {\r\n      const decision = window.confirm(\r\n        \"Are you really want to change battlefield? The game will be reset.\"\r\n      );\r\n      if (decision) {\r\n        cb(Number(target.value));\r\n        reset();\r\n      }\r\n    };\r\n\r\n  return (\r\n    <>\r\n      Left Mouse - X\r\n      <br />\r\n      Right Mouse - O\r\n      <label>\r\n        Size:\r\n        <select onChange={preSet(setSize)} value={size}>\r\n          {sizes.map((size) => (\r\n            <option key={size}>{size}</option>\r\n          ))}\r\n        </select>\r\n        {/* <input type=\"number\" onChange={preSetSize} value={size} /> */}\r\n      </label>\r\n      <label>\r\n        HardMode:\r\n        <input\r\n          type=\"checkbox\"\r\n          onChange={() => setHardMode((mode) => !mode)}\r\n          value={hardMode}\r\n        />\r\n      </label>\r\n      <label>\r\n        Opponent:\r\n        <select onChange={preSet(setWithBot)} value={withBot}>\r\n          <option value=\"0\">Other player</option>\r\n          <option value=\"1\">Random bot</option>\r\n          <option value=\"2\" disabled>\r\n            Minimax bot\r\n          </option>\r\n        </select>\r\n      </label>\r\n      <button onClick={reset}>Retry</button>\r\n      <Box>\r\n        <GameOver winner={winner} reset={reset} />\r\n        {battleField.map((rows, iHor) => (\r\n          <Rows key={iHor}>\r\n            {rows.map((cell, iVert) => (\r\n              <Col\r\n                key={`${iHor}-${iVert}-${gameId}`}\r\n                {...{\r\n                  iHor,\r\n                  iVert,\r\n                  winner,\r\n                  cell,\r\n                  clickHandler,\r\n                  winLine,\r\n                  hardMode,\r\n                  withBot,\r\n                  playerTurn,\r\n                  touchedCells,\r\n                }}\r\n              />\r\n            ))}\r\n          </Rows>\r\n        ))}\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\nconst Col = ({\r\n  iHor,\r\n  iVert,\r\n  winner,\r\n  cell,\r\n  clickHandler,\r\n  winLine,\r\n  hardMode,\r\n  withBot,\r\n  playerTurn,\r\n  touchedCells,\r\n}) => {\r\n  const name = `${iHor}${nameSeparator}${iSymbols[iVert]}`;\r\n  const touched = touchedCells.includes(name);\r\n  const isWinLine = winLine.includes(name);\r\n  const isWinnerCell =\r\n    (winner === 2 && cell === \"x\") || (winner === 3 && cell === \"o\");\r\n\r\n  const { scale, zoom } = useSpring({\r\n    scale: hardMode ? (touched ? 0.00000001 : 1) : 1,\r\n    zoom: 0,\r\n    config: { mass: 5, tension: 500, friction: 80 },\r\n  });\r\n  return (\r\n    <Column\r\n      style={{\r\n        zoom: to([scale, zoom], (s, z) => s + z),\r\n      }}\r\n      $winner={winner}\r\n      $touched={touched}\r\n      $isWinLine={isWinLine}\r\n      $isWinnerCell={isWinnerCell}\r\n      onClick={() => {\r\n        if (playerTurn) {\r\n          clickHandler(iHor, iVert, name)();\r\n        }\r\n      }}\r\n      onContextMenu={(e) => {\r\n        e.preventDefault();\r\n        if (!withBot && !playerTurn) {\r\n          clickHandler(iHor, iVert, name, true)();\r\n        }\r\n        return false;\r\n      }}\r\n    >\r\n      <ColumnName>{name}</ColumnName>\r\n      {cell ? cell : null}\r\n    </Column>\r\n  );\r\n};\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport TicTacToe from \"./game/TicTacToe\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TicTacToe />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}